/*
 * SVRF API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@svrf.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SVRF.Client.Client.SwaggerDateConverter;

namespace SVRF.Client.Model
{
    /// <summary>
    /// SearchMediaResponse
    /// </summary>
    [DataContract]
    public partial class SearchMediaResponse :  IEquatable<SearchMediaResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchMediaResponse" /> class.
        /// </summary>
        /// <param name="Success">If the request was successful.</param>
        /// <param name="NextPageNum">The next page to query to see more results, whether or not the next page actually exists..</param>
        /// <param name="PageNum">The current page number.</param>
        /// <param name="Media">The search results.</param>
        /// <param name="TookMs">The number of milliseconds the request took.</param>
        /// <param name="TotalNum">The number of total results for query.</param>
        public SearchMediaResponse(bool? Success = default(bool?), int? NextPageNum = default(int?), int? PageNum = default(int?), List<Media> Media = default(List<Media>), int? TookMs = default(int?), int? TotalNum = default(int?))
        {
            this.Success = Success;
            this.NextPageNum = NextPageNum;
            this.PageNum = PageNum;
            this.Media = Media;
            this.TookMs = TookMs;
            this.TotalNum = TotalNum;
        }
        
        /// <summary>
        /// If the request was successful
        /// </summary>
        /// <value>If the request was successful</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// The next page to query to see more results, whether or not the next page actually exists.
        /// </summary>
        /// <value>The next page to query to see more results, whether or not the next page actually exists.</value>
        [DataMember(Name="nextPageNum", EmitDefaultValue=false)]
        public int? NextPageNum { get; set; }

        /// <summary>
        /// The current page number
        /// </summary>
        /// <value>The current page number</value>
        [DataMember(Name="pageNum", EmitDefaultValue=false)]
        public int? PageNum { get; set; }

        /// <summary>
        /// The search results
        /// </summary>
        /// <value>The search results</value>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public List<Media> Media { get; set; }

        /// <summary>
        /// The number of milliseconds the request took
        /// </summary>
        /// <value>The number of milliseconds the request took</value>
        [DataMember(Name="tookMs", EmitDefaultValue=false)]
        public int? TookMs { get; set; }

        /// <summary>
        /// The number of total results for query
        /// </summary>
        /// <value>The number of total results for query</value>
        [DataMember(Name="totalNum", EmitDefaultValue=false)]
        public int? TotalNum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchMediaResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  NextPageNum: ").Append(NextPageNum).Append("\n");
            sb.Append("  PageNum: ").Append(PageNum).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  TookMs: ").Append(TookMs).Append("\n");
            sb.Append("  TotalNum: ").Append(TotalNum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchMediaResponse);
        }

        /// <summary>
        /// Returns true if SearchMediaResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchMediaResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchMediaResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.NextPageNum == input.NextPageNum ||
                    (this.NextPageNum != null &&
                    this.NextPageNum.Equals(input.NextPageNum))
                ) && 
                (
                    this.PageNum == input.PageNum ||
                    (this.PageNum != null &&
                    this.PageNum.Equals(input.PageNum))
                ) && 
                (
                    this.Media == input.Media ||
                    this.Media != null &&
                    this.Media.SequenceEqual(input.Media)
                ) && 
                (
                    this.TookMs == input.TookMs ||
                    (this.TookMs != null &&
                    this.TookMs.Equals(input.TookMs))
                ) && 
                (
                    this.TotalNum == input.TotalNum ||
                    (this.TotalNum != null &&
                    this.TotalNum.Equals(input.TotalNum))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.NextPageNum != null)
                    hashCode = hashCode * 59 + this.NextPageNum.GetHashCode();
                if (this.PageNum != null)
                    hashCode = hashCode * 59 + this.PageNum.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.TookMs != null)
                    hashCode = hashCode * 59 + this.TookMs.GetHashCode();
                if (this.TotalNum != null)
                    hashCode = hashCode * 59 + this.TotalNum.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
