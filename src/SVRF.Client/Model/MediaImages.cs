/*
 * SVRF API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@svrf.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SVRF.Client.Client.SwaggerDateConverter;

namespace SVRF.Client.Model
{
    /// <summary>
    /// Resized &#x60;jpeg&#x60; stills of the Media. For &#x60;video&#x60;, these will be stills from 1/3 of the video&#39;s duration. Resolutions larger than the original size will not be included (the original is included as &#x60;max&#x60;). For stereoscopic content, this will be a monoscopic version of the top or left channel.
    /// </summary>
    [DataContract]
    public partial class MediaImages :  IEquatable<MediaImages>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaImages" /> class.
        /// </summary>
        /// <param name="_136">136px wide image. This image may be used for thumbnailing..</param>
        /// <param name="_540">540px wide image. This image may be used for thumbnailing..</param>
        /// <param name="_720">720px wide image. This image may be used for thumbnailing..</param>
        /// <param name="_1080">1080px wide image. This image should be used for previews or other uses requiring clear resolution at low bandwidth..</param>
        /// <param name="_4096">4096px wide image. This image should be used on mobile devices, as larger images may cause some devices to crash..</param>
        /// <param name="_8192">The image at a reasonably large resolution that can be used for a better desktop experience..</param>
        /// <param name="_1080Watermarked">1080px wide watermarked image. This image should be used for sharing on social media..</param>
        /// <param name="_720x405">A 16:9 image. This image may be used for thumbnailing..</param>
        /// <param name="_720x540">A 4:3 image. This image may be used for thumbnailing..</param>
        /// <param name="_720x720">A 1:1 image. This image may be used for thumbnailing..</param>
        /// <param name="Max">The image in its largest available size (the original size). This image should be used in third-party applications for the best experience, except on mobile devices (see &#x60;4096&#x60;)..</param>
        public MediaImages(string _136 = default(string), string _540 = default(string), string _720 = default(string), string _1080 = default(string), string _4096 = default(string), string _8192 = default(string), string _1080Watermarked = default(string), string _720x405 = default(string), string _720x540 = default(string), string _720x720 = default(string), string Max = default(string))
        {
            this._136 = _136;
            this._540 = _540;
            this._720 = _720;
            this._1080 = _1080;
            this._4096 = _4096;
            this._8192 = _8192;
            this._1080Watermarked = _1080Watermarked;
            this._720x405 = _720x405;
            this._720x540 = _720x540;
            this._720x720 = _720x720;
            this.Max = Max;
        }
        
        /// <summary>
        /// 136px wide image. This image may be used for thumbnailing.
        /// </summary>
        /// <value>136px wide image. This image may be used for thumbnailing.</value>
        [DataMember(Name="136", EmitDefaultValue=false)]
        public string _136 { get; set; }

        /// <summary>
        /// 540px wide image. This image may be used for thumbnailing.
        /// </summary>
        /// <value>540px wide image. This image may be used for thumbnailing.</value>
        [DataMember(Name="540", EmitDefaultValue=false)]
        public string _540 { get; set; }

        /// <summary>
        /// 720px wide image. This image may be used for thumbnailing.
        /// </summary>
        /// <value>720px wide image. This image may be used for thumbnailing.</value>
        [DataMember(Name="720", EmitDefaultValue=false)]
        public string _720 { get; set; }

        /// <summary>
        /// 1080px wide image. This image should be used for previews or other uses requiring clear resolution at low bandwidth.
        /// </summary>
        /// <value>1080px wide image. This image should be used for previews or other uses requiring clear resolution at low bandwidth.</value>
        [DataMember(Name="1080", EmitDefaultValue=false)]
        public string _1080 { get; set; }

        /// <summary>
        /// 4096px wide image. This image should be used on mobile devices, as larger images may cause some devices to crash.
        /// </summary>
        /// <value>4096px wide image. This image should be used on mobile devices, as larger images may cause some devices to crash.</value>
        [DataMember(Name="4096", EmitDefaultValue=false)]
        public string _4096 { get; set; }

        /// <summary>
        /// The image at a reasonably large resolution that can be used for a better desktop experience.
        /// </summary>
        /// <value>The image at a reasonably large resolution that can be used for a better desktop experience.</value>
        [DataMember(Name="8192", EmitDefaultValue=false)]
        public string _8192 { get; set; }

        /// <summary>
        /// 1080px wide watermarked image. This image should be used for sharing on social media.
        /// </summary>
        /// <value>1080px wide watermarked image. This image should be used for sharing on social media.</value>
        [DataMember(Name="1080Watermarked", EmitDefaultValue=false)]
        public string _1080Watermarked { get; set; }

        /// <summary>
        /// A 16:9 image. This image may be used for thumbnailing.
        /// </summary>
        /// <value>A 16:9 image. This image may be used for thumbnailing.</value>
        [DataMember(Name="720x405", EmitDefaultValue=false)]
        public string _720x405 { get; set; }

        /// <summary>
        /// A 4:3 image. This image may be used for thumbnailing.
        /// </summary>
        /// <value>A 4:3 image. This image may be used for thumbnailing.</value>
        [DataMember(Name="720x540", EmitDefaultValue=false)]
        public string _720x540 { get; set; }

        /// <summary>
        /// A 1:1 image. This image may be used for thumbnailing.
        /// </summary>
        /// <value>A 1:1 image. This image may be used for thumbnailing.</value>
        [DataMember(Name="720x720", EmitDefaultValue=false)]
        public string _720x720 { get; set; }

        /// <summary>
        /// The image in its largest available size (the original size). This image should be used in third-party applications for the best experience, except on mobile devices (see &#x60;4096&#x60;).
        /// </summary>
        /// <value>The image in its largest available size (the original size). This image should be used in third-party applications for the best experience, except on mobile devices (see &#x60;4096&#x60;).</value>
        [DataMember(Name="max", EmitDefaultValue=false)]
        public string Max { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaImages {\n");
            sb.Append("  _136: ").Append(_136).Append("\n");
            sb.Append("  _540: ").Append(_540).Append("\n");
            sb.Append("  _720: ").Append(_720).Append("\n");
            sb.Append("  _1080: ").Append(_1080).Append("\n");
            sb.Append("  _4096: ").Append(_4096).Append("\n");
            sb.Append("  _8192: ").Append(_8192).Append("\n");
            sb.Append("  _1080Watermarked: ").Append(_1080Watermarked).Append("\n");
            sb.Append("  _720x405: ").Append(_720x405).Append("\n");
            sb.Append("  _720x540: ").Append(_720x540).Append("\n");
            sb.Append("  _720x720: ").Append(_720x720).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaImages);
        }

        /// <summary>
        /// Returns true if MediaImages instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaImages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaImages input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._136 == input._136 ||
                    (this._136 != null &&
                    this._136.Equals(input._136))
                ) && 
                (
                    this._540 == input._540 ||
                    (this._540 != null &&
                    this._540.Equals(input._540))
                ) && 
                (
                    this._720 == input._720 ||
                    (this._720 != null &&
                    this._720.Equals(input._720))
                ) && 
                (
                    this._1080 == input._1080 ||
                    (this._1080 != null &&
                    this._1080.Equals(input._1080))
                ) && 
                (
                    this._4096 == input._4096 ||
                    (this._4096 != null &&
                    this._4096.Equals(input._4096))
                ) && 
                (
                    this._8192 == input._8192 ||
                    (this._8192 != null &&
                    this._8192.Equals(input._8192))
                ) && 
                (
                    this._1080Watermarked == input._1080Watermarked ||
                    (this._1080Watermarked != null &&
                    this._1080Watermarked.Equals(input._1080Watermarked))
                ) && 
                (
                    this._720x405 == input._720x405 ||
                    (this._720x405 != null &&
                    this._720x405.Equals(input._720x405))
                ) && 
                (
                    this._720x540 == input._720x540 ||
                    (this._720x540 != null &&
                    this._720x540.Equals(input._720x540))
                ) && 
                (
                    this._720x720 == input._720x720 ||
                    (this._720x720 != null &&
                    this._720x720.Equals(input._720x720))
                ) && 
                (
                    this.Max == input.Max ||
                    (this.Max != null &&
                    this.Max.Equals(input.Max))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._136 != null)
                    hashCode = hashCode * 59 + this._136.GetHashCode();
                if (this._540 != null)
                    hashCode = hashCode * 59 + this._540.GetHashCode();
                if (this._720 != null)
                    hashCode = hashCode * 59 + this._720.GetHashCode();
                if (this._1080 != null)
                    hashCode = hashCode * 59 + this._1080.GetHashCode();
                if (this._4096 != null)
                    hashCode = hashCode * 59 + this._4096.GetHashCode();
                if (this._8192 != null)
                    hashCode = hashCode * 59 + this._8192.GetHashCode();
                if (this._1080Watermarked != null)
                    hashCode = hashCode * 59 + this._1080Watermarked.GetHashCode();
                if (this._720x405 != null)
                    hashCode = hashCode * 59 + this._720x405.GetHashCode();
                if (this._720x540 != null)
                    hashCode = hashCode * 59 + this._720x540.GetHashCode();
                if (this._720x720 != null)
                    hashCode = hashCode * 59 + this._720x720.GetHashCode();
                if (this.Max != null)
                    hashCode = hashCode * 59 + this.Max.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
