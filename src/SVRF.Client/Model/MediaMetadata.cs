/*
 * SVRF API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@svrf.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SVRF.Client.Client.SwaggerDateConverter;

namespace SVRF.Client.Model
{
    /// <summary>
    /// Metadata about the Media
    /// </summary>
    [DataContract]
    public partial class MediaMetadata :  IEquatable<MediaMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaMetadata" /> class.
        /// </summary>
        /// <param name="HasBlendShapes">For 3D Media, denotes that this model contains blend shapes, but having to calculate and apply weights to them is not required. These are models like glasses, hats, and billboards that do not react to face movement..</param>
        /// <param name="IsFaceFilter">For 3D Media, denotes that this model can be applied as a Face Filter overlay on a video of a face..</param>
        /// <param name="RequiresBlendShapes">For 3D Media, denotes that calculating and applying blend shape weights to this model is _required_ for the correct experience. If your platform cannot detect and calculate blend shape weights you MUST NOT present these models to your users..</param>
        public MediaMetadata(bool? HasBlendShapes = default(bool?), bool? IsFaceFilter = default(bool?), bool? RequiresBlendShapes = default(bool?))
        {
            this.HasBlendShapes = HasBlendShapes;
            this.IsFaceFilter = IsFaceFilter;
            this.RequiresBlendShapes = RequiresBlendShapes;
        }
        
        /// <summary>
        /// For 3D Media, denotes that this model contains blend shapes, but having to calculate and apply weights to them is not required. These are models like glasses, hats, and billboards that do not react to face movement.
        /// </summary>
        /// <value>For 3D Media, denotes that this model contains blend shapes, but having to calculate and apply weights to them is not required. These are models like glasses, hats, and billboards that do not react to face movement.</value>
        [DataMember(Name="hasBlendShapes", EmitDefaultValue=false)]
        public bool? HasBlendShapes { get; set; }

        /// <summary>
        /// For 3D Media, denotes that this model can be applied as a Face Filter overlay on a video of a face.
        /// </summary>
        /// <value>For 3D Media, denotes that this model can be applied as a Face Filter overlay on a video of a face.</value>
        [DataMember(Name="isFaceFilter", EmitDefaultValue=false)]
        public bool? IsFaceFilter { get; set; }

        /// <summary>
        /// For 3D Media, denotes that calculating and applying blend shape weights to this model is _required_ for the correct experience. If your platform cannot detect and calculate blend shape weights you MUST NOT present these models to your users.
        /// </summary>
        /// <value>For 3D Media, denotes that calculating and applying blend shape weights to this model is _required_ for the correct experience. If your platform cannot detect and calculate blend shape weights you MUST NOT present these models to your users.</value>
        [DataMember(Name="requiresBlendShapes", EmitDefaultValue=false)]
        public bool? RequiresBlendShapes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaMetadata {\n");
            sb.Append("  HasBlendShapes: ").Append(HasBlendShapes).Append("\n");
            sb.Append("  IsFaceFilter: ").Append(IsFaceFilter).Append("\n");
            sb.Append("  RequiresBlendShapes: ").Append(RequiresBlendShapes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaMetadata);
        }

        /// <summary>
        /// Returns true if MediaMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HasBlendShapes == input.HasBlendShapes ||
                    (this.HasBlendShapes != null &&
                    this.HasBlendShapes.Equals(input.HasBlendShapes))
                ) && 
                (
                    this.IsFaceFilter == input.IsFaceFilter ||
                    (this.IsFaceFilter != null &&
                    this.IsFaceFilter.Equals(input.IsFaceFilter))
                ) && 
                (
                    this.RequiresBlendShapes == input.RequiresBlendShapes ||
                    (this.RequiresBlendShapes != null &&
                    this.RequiresBlendShapes.Equals(input.RequiresBlendShapes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HasBlendShapes != null)
                    hashCode = hashCode * 59 + this.HasBlendShapes.GetHashCode();
                if (this.IsFaceFilter != null)
                    hashCode = hashCode * 59 + this.IsFaceFilter.GetHashCode();
                if (this.RequiresBlendShapes != null)
                    hashCode = hashCode * 59 + this.RequiresBlendShapes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
