/*
 * SVRF API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@svrf.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SVRF.Client.Client.SwaggerDateConverter;

namespace SVRF.Client.Model
{
    /// <summary>
    /// Various sizes of images and resolutions for the Media. They will never be larger than the Media source&#39;s original resolution.
    /// </summary>
    [DataContract]
    public partial class MediaFiles :  IEquatable<MediaFiles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaFiles" /> class.
        /// </summary>
        /// <param name="Glb">This is the binary glTF format that should be used by clients if the Media is a 3D object. This is the preferred format to use on end-user devices..</param>
        /// <param name="GlbDraco">This is the binary glTF format, with additional DRACO compression, that should be used by clients if the Media is a 3D object. Your renderer must support the KHR_draco_mesh_compression extension to use this model..</param>
        /// <param name="Gltf">A map of file names to urls where those files are hosted. The file names are relative and their name heirarchy should be respected when saving them locally..</param>
        /// <param name="Images">Images.</param>
        /// <param name="Stereo">Stereo.</param>
        /// <param name="Videos">Videos.</param>
        public MediaFiles(string Glb = default(string), string GlbDraco = default(string), Dictionary<string, string> Gltf = default(Dictionary<string, string>), MediaImages Images = default(MediaImages), MediaStereo Stereo = default(MediaStereo), MediaVideos Videos = default(MediaVideos))
        {
            this.Glb = Glb;
            this.GlbDraco = GlbDraco;
            this.Gltf = Gltf;
            this.Images = Images;
            this.Stereo = Stereo;
            this.Videos = Videos;
        }
        
        /// <summary>
        /// This is the binary glTF format that should be used by clients if the Media is a 3D object. This is the preferred format to use on end-user devices.
        /// </summary>
        /// <value>This is the binary glTF format that should be used by clients if the Media is a 3D object. This is the preferred format to use on end-user devices.</value>
        [DataMember(Name="glb", EmitDefaultValue=false)]
        public string Glb { get; set; }

        /// <summary>
        /// This is the binary glTF format, with additional DRACO compression, that should be used by clients if the Media is a 3D object. Your renderer must support the KHR_draco_mesh_compression extension to use this model.
        /// </summary>
        /// <value>This is the binary glTF format, with additional DRACO compression, that should be used by clients if the Media is a 3D object. Your renderer must support the KHR_draco_mesh_compression extension to use this model.</value>
        [DataMember(Name="glb-draco", EmitDefaultValue=false)]
        public string GlbDraco { get; set; }

        /// <summary>
        /// A map of file names to urls where those files are hosted. The file names are relative and their name heirarchy should be respected when saving them locally.
        /// </summary>
        /// <value>A map of file names to urls where those files are hosted. The file names are relative and their name heirarchy should be respected when saving them locally.</value>
        [DataMember(Name="gltf", EmitDefaultValue=false)]
        public Dictionary<string, string> Gltf { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public MediaImages Images { get; set; }

        /// <summary>
        /// Gets or Sets Stereo
        /// </summary>
        [DataMember(Name="stereo", EmitDefaultValue=false)]
        public MediaStereo Stereo { get; set; }

        /// <summary>
        /// Gets or Sets Videos
        /// </summary>
        [DataMember(Name="videos", EmitDefaultValue=false)]
        public MediaVideos Videos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaFiles {\n");
            sb.Append("  Glb: ").Append(Glb).Append("\n");
            sb.Append("  GlbDraco: ").Append(GlbDraco).Append("\n");
            sb.Append("  Gltf: ").Append(Gltf).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Stereo: ").Append(Stereo).Append("\n");
            sb.Append("  Videos: ").Append(Videos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaFiles);
        }

        /// <summary>
        /// Returns true if MediaFiles instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaFiles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaFiles input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Glb == input.Glb ||
                    (this.Glb != null &&
                    this.Glb.Equals(input.Glb))
                ) && 
                (
                    this.GlbDraco == input.GlbDraco ||
                    (this.GlbDraco != null &&
                    this.GlbDraco.Equals(input.GlbDraco))
                ) && 
                (
                    this.Gltf == input.Gltf ||
                    this.Gltf != null &&
                    this.Gltf.SequenceEqual(input.Gltf)
                ) && 
                (
                    this.Images == input.Images ||
                    (this.Images != null &&
                    this.Images.Equals(input.Images))
                ) && 
                (
                    this.Stereo == input.Stereo ||
                    (this.Stereo != null &&
                    this.Stereo.Equals(input.Stereo))
                ) && 
                (
                    this.Videos == input.Videos ||
                    (this.Videos != null &&
                    this.Videos.Equals(input.Videos))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Glb != null)
                    hashCode = hashCode * 59 + this.Glb.GetHashCode();
                if (this.GlbDraco != null)
                    hashCode = hashCode * 59 + this.GlbDraco.GetHashCode();
                if (this.Gltf != null)
                    hashCode = hashCode * 59 + this.Gltf.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.Stereo != null)
                    hashCode = hashCode * 59 + this.Stereo.GetHashCode();
                if (this.Videos != null)
                    hashCode = hashCode * 59 + this.Videos.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
