/*
 * SVRF API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@svrf.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SVRF.Client.Client.SwaggerDateConverter;

namespace SVRF.Client.Model
{
    /// <summary>
    /// Media
    /// </summary>
    [DataContract]
    public partial class Media :  IEquatable<Media>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public MediaType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Media" /> class.
        /// </summary>
        /// <param name="Adult">Whether the Media is adult content (default to false).</param>
        /// <param name="Authors">The Media&#39;s authors. This should be displayed when possible..</param>
        /// <param name="Canonical">The canonical page this Media can be found at via SVRF..</param>
        /// <param name="Description">A description of the Media.</param>
        /// <param name="Duration">The duration of the Media in seconds..</param>
        /// <param name="EmbedHtml">An &#x60;&lt;iframe&gt;&#x60; tag that embeds a player that plays the Media..</param>
        /// <param name="EmbedUrl">A player that can be embedded using an &#x60;&lt;iframe&gt;&#x60; tag to play the Media..</param>
        /// <param name="Files">Files.</param>
        /// <param name="Height">The height, in pixels, of the Media&#39;s source.</param>
        /// <param name="Id">The unique ID of this Media.</param>
        /// <param name="Site">The site that this Media came from. This should be displayed when possible..</param>
        /// <param name="Title">The title of the Media, suitable for displaying.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Url">The original page this Media is located at..</param>
        /// <param name="Width">The width, in pixels, of the Media&#39;s source.</param>
        public Media(bool? Adult = false, List<string> Authors = default(List<string>), string Canonical = default(string), string Description = default(string), decimal? Duration = default(decimal?), string EmbedHtml = default(string), string EmbedUrl = default(string), MediaFiles Files = default(MediaFiles), decimal? Height = default(decimal?), string Id = default(string), string Site = default(string), string Title = default(string), MediaType? Type = default(MediaType?), string Url = default(string), decimal? Width = default(decimal?))
        {
            // use default value if no "Adult" provided
            if (Adult == null)
            {
                this.Adult = false;
            }
            else
            {
                this.Adult = Adult;
            }
            this.Authors = Authors;
            this.Canonical = Canonical;
            this.Description = Description;
            this.Duration = Duration;
            this.EmbedHtml = EmbedHtml;
            this.EmbedUrl = EmbedUrl;
            this.Files = Files;
            this.Height = Height;
            this.Id = Id;
            this.Site = Site;
            this.Title = Title;
            this.Type = Type;
            this.Url = Url;
            this.Width = Width;
        }
        
        /// <summary>
        /// Whether the Media is adult content
        /// </summary>
        /// <value>Whether the Media is adult content</value>
        [DataMember(Name="adult", EmitDefaultValue=false)]
        public bool? Adult { get; set; }

        /// <summary>
        /// The Media&#39;s authors. This should be displayed when possible.
        /// </summary>
        /// <value>The Media&#39;s authors. This should be displayed when possible.</value>
        [DataMember(Name="authors", EmitDefaultValue=false)]
        public List<string> Authors { get; set; }

        /// <summary>
        /// The canonical page this Media can be found at via SVRF.
        /// </summary>
        /// <value>The canonical page this Media can be found at via SVRF.</value>
        [DataMember(Name="canonical", EmitDefaultValue=false)]
        public string Canonical { get; set; }

        /// <summary>
        /// A description of the Media
        /// </summary>
        /// <value>A description of the Media</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The duration of the Media in seconds.
        /// </summary>
        /// <value>The duration of the Media in seconds.</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public decimal? Duration { get; set; }

        /// <summary>
        /// An &#x60;&lt;iframe&gt;&#x60; tag that embeds a player that plays the Media.
        /// </summary>
        /// <value>An &#x60;&lt;iframe&gt;&#x60; tag that embeds a player that plays the Media.</value>
        [DataMember(Name="embedHtml", EmitDefaultValue=false)]
        public string EmbedHtml { get; set; }

        /// <summary>
        /// A player that can be embedded using an &#x60;&lt;iframe&gt;&#x60; tag to play the Media.
        /// </summary>
        /// <value>A player that can be embedded using an &#x60;&lt;iframe&gt;&#x60; tag to play the Media.</value>
        [DataMember(Name="embedUrl", EmitDefaultValue=false)]
        public string EmbedUrl { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public MediaFiles Files { get; set; }

        /// <summary>
        /// The height, in pixels, of the Media&#39;s source
        /// </summary>
        /// <value>The height, in pixels, of the Media&#39;s source</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public decimal? Height { get; set; }

        /// <summary>
        /// The unique ID of this Media
        /// </summary>
        /// <value>The unique ID of this Media</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The site that this Media came from. This should be displayed when possible.
        /// </summary>
        /// <value>The site that this Media came from. This should be displayed when possible.</value>
        [DataMember(Name="site", EmitDefaultValue=false)]
        public string Site { get; set; }

        /// <summary>
        /// The title of the Media, suitable for displaying
        /// </summary>
        /// <value>The title of the Media, suitable for displaying</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }


        /// <summary>
        /// The original page this Media is located at.
        /// </summary>
        /// <value>The original page this Media is located at.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The width, in pixels, of the Media&#39;s source
        /// </summary>
        /// <value>The width, in pixels, of the Media&#39;s source</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public decimal? Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Media {\n");
            sb.Append("  Adult: ").Append(Adult).Append("\n");
            sb.Append("  Authors: ").Append(Authors).Append("\n");
            sb.Append("  Canonical: ").Append(Canonical).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  EmbedHtml: ").Append(EmbedHtml).Append("\n");
            sb.Append("  EmbedUrl: ").Append(EmbedUrl).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Media);
        }

        /// <summary>
        /// Returns true if Media instances are equal
        /// </summary>
        /// <param name="input">Instance of Media to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Media input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Adult == input.Adult ||
                    (this.Adult != null &&
                    this.Adult.Equals(input.Adult))
                ) && 
                (
                    this.Authors == input.Authors ||
                    this.Authors != null &&
                    this.Authors.SequenceEqual(input.Authors)
                ) && 
                (
                    this.Canonical == input.Canonical ||
                    (this.Canonical != null &&
                    this.Canonical.Equals(input.Canonical))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.EmbedHtml == input.EmbedHtml ||
                    (this.EmbedHtml != null &&
                    this.EmbedHtml.Equals(input.EmbedHtml))
                ) && 
                (
                    this.EmbedUrl == input.EmbedUrl ||
                    (this.EmbedUrl != null &&
                    this.EmbedUrl.Equals(input.EmbedUrl))
                ) && 
                (
                    this.Files == input.Files ||
                    (this.Files != null &&
                    this.Files.Equals(input.Files))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Site == input.Site ||
                    (this.Site != null &&
                    this.Site.Equals(input.Site))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Adult != null)
                    hashCode = hashCode * 59 + this.Adult.GetHashCode();
                if (this.Authors != null)
                    hashCode = hashCode * 59 + this.Authors.GetHashCode();
                if (this.Canonical != null)
                    hashCode = hashCode * 59 + this.Canonical.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.EmbedHtml != null)
                    hashCode = hashCode * 59 + this.EmbedHtml.GetHashCode();
                if (this.EmbedUrl != null)
                    hashCode = hashCode * 59 + this.EmbedUrl.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Site != null)
                    hashCode = hashCode * 59 + this.Site.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
