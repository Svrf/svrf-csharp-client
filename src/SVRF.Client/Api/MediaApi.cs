/*
 * SVRF API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@svrf.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SVRF.Client.Client;
using SVRF.Client.Model;

namespace SVRF.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Media by ID Endpoint
        /// </summary>
        /// <remarks>
        /// Fetch media by its ID.
        /// </remarks>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Media</param>
        /// <returns>SingleMediaResponse</returns>
        SingleMediaResponse GetById (string id);

        /// <summary>
        /// Media by ID Endpoint
        /// </summary>
        /// <remarks>
        /// Fetch media by its ID.
        /// </remarks>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Media</param>
        /// <returns>ApiResponse of SingleMediaResponse</returns>
        ApiResponse<SingleMediaResponse> GetByIdWithHttpInfo (string id);
        /// <summary>
        /// Trending Endpoint
        /// </summary>
        /// <remarks>
        /// The SVRF Trending Endpoint provides your app or project with the hottest immersive content curated by real humans. The experiences returned mirror the [SVRF homepage](https://www.svrf.com), from timely cultural content to trending pop-culture references. The trending experiences are updated regularly to ensure users always get fresh updates of immersive content.
        /// </remarks>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results per page. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>TrendingResponse</returns>
        TrendingResponse GetTrending (List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null);

        /// <summary>
        /// Trending Endpoint
        /// </summary>
        /// <remarks>
        /// The SVRF Trending Endpoint provides your app or project with the hottest immersive content curated by real humans. The experiences returned mirror the [SVRF homepage](https://www.svrf.com), from timely cultural content to trending pop-culture references. The trending experiences are updated regularly to ensure users always get fresh updates of immersive content.
        /// </remarks>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results per page. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>ApiResponse of TrendingResponse</returns>
        ApiResponse<TrendingResponse> GetTrendingWithHttpInfo (List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null);
        /// <summary>
        /// Search Endpoint
        /// </summary>
        /// <remarks>
        /// The SVRF Search Endpoint brings the power of immersive search found on [SVRF.com](https://www.svrf.com) to your app or project. SVRF&#39;s search engine enables your users to instantly find the immersive experience they&#39;re seeking. Content is sorted by the SVRF rating system, ensuring that the highest quality content and most prevalent search results are returned. 
        /// </remarks>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Url-encoded search query.</param>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results to return per-page, from 1 to 100. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>SearchMediaResponse</returns>
        SearchMediaResponse Search (string q, List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null);

        /// <summary>
        /// Search Endpoint
        /// </summary>
        /// <remarks>
        /// The SVRF Search Endpoint brings the power of immersive search found on [SVRF.com](https://www.svrf.com) to your app or project. SVRF&#39;s search engine enables your users to instantly find the immersive experience they&#39;re seeking. Content is sorted by the SVRF rating system, ensuring that the highest quality content and most prevalent search results are returned. 
        /// </remarks>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Url-encoded search query.</param>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results to return per-page, from 1 to 100. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>ApiResponse of SearchMediaResponse</returns>
        ApiResponse<SearchMediaResponse> SearchWithHttpInfo (string q, List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Media by ID Endpoint
        /// </summary>
        /// <remarks>
        /// Fetch media by its ID.
        /// </remarks>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Media</param>
        /// <returns>Task of SingleMediaResponse</returns>
        System.Threading.Tasks.Task<SingleMediaResponse> GetByIdAsync (string id);

        /// <summary>
        /// Media by ID Endpoint
        /// </summary>
        /// <remarks>
        /// Fetch media by its ID.
        /// </remarks>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Media</param>
        /// <returns>Task of ApiResponse (SingleMediaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleMediaResponse>> GetByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// Trending Endpoint
        /// </summary>
        /// <remarks>
        /// The SVRF Trending Endpoint provides your app or project with the hottest immersive content curated by real humans. The experiences returned mirror the [SVRF homepage](https://www.svrf.com), from timely cultural content to trending pop-culture references. The trending experiences are updated regularly to ensure users always get fresh updates of immersive content.
        /// </remarks>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results per page. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>Task of TrendingResponse</returns>
        System.Threading.Tasks.Task<TrendingResponse> GetTrendingAsync (List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null);

        /// <summary>
        /// Trending Endpoint
        /// </summary>
        /// <remarks>
        /// The SVRF Trending Endpoint provides your app or project with the hottest immersive content curated by real humans. The experiences returned mirror the [SVRF homepage](https://www.svrf.com), from timely cultural content to trending pop-culture references. The trending experiences are updated regularly to ensure users always get fresh updates of immersive content.
        /// </remarks>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results per page. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>Task of ApiResponse (TrendingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrendingResponse>> GetTrendingAsyncWithHttpInfo (List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null);
        /// <summary>
        /// Search Endpoint
        /// </summary>
        /// <remarks>
        /// The SVRF Search Endpoint brings the power of immersive search found on [SVRF.com](https://www.svrf.com) to your app or project. SVRF&#39;s search engine enables your users to instantly find the immersive experience they&#39;re seeking. Content is sorted by the SVRF rating system, ensuring that the highest quality content and most prevalent search results are returned. 
        /// </remarks>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Url-encoded search query.</param>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results to return per-page, from 1 to 100. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>Task of SearchMediaResponse</returns>
        System.Threading.Tasks.Task<SearchMediaResponse> SearchAsync (string q, List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null);

        /// <summary>
        /// Search Endpoint
        /// </summary>
        /// <remarks>
        /// The SVRF Search Endpoint brings the power of immersive search found on [SVRF.com](https://www.svrf.com) to your app or project. SVRF&#39;s search engine enables your users to instantly find the immersive experience they&#39;re seeking. Content is sorted by the SVRF rating system, ensuring that the highest quality content and most prevalent search results are returned. 
        /// </remarks>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Url-encoded search query.</param>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results to return per-page, from 1 to 100. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>Task of ApiResponse (SearchMediaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchMediaResponse>> SearchAsyncWithHttpInfo (string q, List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MediaApi : IMediaApi
    {
        private SVRF.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MediaApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = SVRF.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MediaApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SVRF.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SVRF.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Media by ID Endpoint Fetch media by its ID.
        /// </summary>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Media</param>
        /// <returns>SingleMediaResponse</returns>
        public SingleMediaResponse GetById (string id)
        {
             ApiResponse<SingleMediaResponse> localVarResponse = GetByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Media by ID Endpoint Fetch media by its ID.
        /// </summary>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Media</param>
        /// <returns>ApiResponse of SingleMediaResponse</returns>
        public ApiResponse< SingleMediaResponse > GetByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->GetById");

            var localVarPath = "/vr/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (XAppToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-app-token")))
            {
                localVarHeaderParams["x-app-token"] = Configuration.GetApiKeyWithPrefix("x-app-token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleMediaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleMediaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleMediaResponse)));
        }

        /// <summary>
        /// Media by ID Endpoint Fetch media by its ID.
        /// </summary>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Media</param>
        /// <returns>Task of SingleMediaResponse</returns>
        public async System.Threading.Tasks.Task<SingleMediaResponse> GetByIdAsync (string id)
        {
             ApiResponse<SingleMediaResponse> localVarResponse = await GetByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Media by ID Endpoint Fetch media by its ID.
        /// </summary>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of Media</param>
        /// <returns>Task of ApiResponse (SingleMediaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleMediaResponse>> GetByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->GetById");

            var localVarPath = "/vr/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (XAppToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-app-token")))
            {
                localVarHeaderParams["x-app-token"] = Configuration.GetApiKeyWithPrefix("x-app-token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleMediaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleMediaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleMediaResponse)));
        }

        /// <summary>
        /// Trending Endpoint The SVRF Trending Endpoint provides your app or project with the hottest immersive content curated by real humans. The experiences returned mirror the [SVRF homepage](https://www.svrf.com), from timely cultural content to trending pop-culture references. The trending experiences are updated regularly to ensure users always get fresh updates of immersive content.
        /// </summary>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results per page. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>TrendingResponse</returns>
        public TrendingResponse GetTrending (List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null)
        {
             ApiResponse<TrendingResponse> localVarResponse = GetTrendingWithHttpInfo(type, stereoscopicType, category, size, minimumWidth, pageNum, isFaceFilter, hasBlendShapes, requiresBlendShapes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trending Endpoint The SVRF Trending Endpoint provides your app or project with the hottest immersive content curated by real humans. The experiences returned mirror the [SVRF homepage](https://www.svrf.com), from timely cultural content to trending pop-culture references. The trending experiences are updated regularly to ensure users always get fresh updates of immersive content.
        /// </summary>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results per page. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>ApiResponse of TrendingResponse</returns>
        public ApiResponse< TrendingResponse > GetTrendingWithHttpInfo (List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null)
        {

            var localVarPath = "/vr/trending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "type", type)); // query parameter
            if (stereoscopicType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stereoscopicType", stereoscopicType)); // query parameter
            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (minimumWidth != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "minimumWidth", minimumWidth)); // query parameter
            if (pageNum != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNum", pageNum)); // query parameter
            if (isFaceFilter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isFaceFilter", isFaceFilter)); // query parameter
            if (hasBlendShapes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "hasBlendShapes", hasBlendShapes)); // query parameter
            if (requiresBlendShapes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "requiresBlendShapes", requiresBlendShapes)); // query parameter

            // authentication (XAppToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-app-token")))
            {
                localVarHeaderParams["x-app-token"] = Configuration.GetApiKeyWithPrefix("x-app-token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrendingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrendingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrendingResponse)));
        }

        /// <summary>
        /// Trending Endpoint The SVRF Trending Endpoint provides your app or project with the hottest immersive content curated by real humans. The experiences returned mirror the [SVRF homepage](https://www.svrf.com), from timely cultural content to trending pop-culture references. The trending experiences are updated regularly to ensure users always get fresh updates of immersive content.
        /// </summary>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results per page. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>Task of TrendingResponse</returns>
        public async System.Threading.Tasks.Task<TrendingResponse> GetTrendingAsync (List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null)
        {
             ApiResponse<TrendingResponse> localVarResponse = await GetTrendingAsyncWithHttpInfo(type, stereoscopicType, category, size, minimumWidth, pageNum, isFaceFilter, hasBlendShapes, requiresBlendShapes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trending Endpoint The SVRF Trending Endpoint provides your app or project with the hottest immersive content curated by real humans. The experiences returned mirror the [SVRF homepage](https://www.svrf.com), from timely cultural content to trending pop-culture references. The trending experiences are updated regularly to ensure users always get fresh updates of immersive content.
        /// </summary>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results per page. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>Task of ApiResponse (TrendingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrendingResponse>> GetTrendingAsyncWithHttpInfo (List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null)
        {

            var localVarPath = "/vr/trending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "type", type)); // query parameter
            if (stereoscopicType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stereoscopicType", stereoscopicType)); // query parameter
            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (minimumWidth != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "minimumWidth", minimumWidth)); // query parameter
            if (pageNum != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNum", pageNum)); // query parameter
            if (isFaceFilter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isFaceFilter", isFaceFilter)); // query parameter
            if (hasBlendShapes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "hasBlendShapes", hasBlendShapes)); // query parameter
            if (requiresBlendShapes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "requiresBlendShapes", requiresBlendShapes)); // query parameter

            // authentication (XAppToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-app-token")))
            {
                localVarHeaderParams["x-app-token"] = Configuration.GetApiKeyWithPrefix("x-app-token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrendingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrendingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrendingResponse)));
        }

        /// <summary>
        /// Search Endpoint The SVRF Search Endpoint brings the power of immersive search found on [SVRF.com](https://www.svrf.com) to your app or project. SVRF&#39;s search engine enables your users to instantly find the immersive experience they&#39;re seeking. Content is sorted by the SVRF rating system, ensuring that the highest quality content and most prevalent search results are returned. 
        /// </summary>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Url-encoded search query.</param>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results to return per-page, from 1 to 100. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>SearchMediaResponse</returns>
        public SearchMediaResponse Search (string q, List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null)
        {
             ApiResponse<SearchMediaResponse> localVarResponse = SearchWithHttpInfo(q, type, stereoscopicType, category, size, minimumWidth, pageNum, isFaceFilter, hasBlendShapes, requiresBlendShapes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Endpoint The SVRF Search Endpoint brings the power of immersive search found on [SVRF.com](https://www.svrf.com) to your app or project. SVRF&#39;s search engine enables your users to instantly find the immersive experience they&#39;re seeking. Content is sorted by the SVRF rating system, ensuring that the highest quality content and most prevalent search results are returned. 
        /// </summary>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Url-encoded search query.</param>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results to return per-page, from 1 to 100. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>ApiResponse of SearchMediaResponse</returns>
        public ApiResponse< SearchMediaResponse > SearchWithHttpInfo (string q, List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null)
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling MediaApi->Search");

            var localVarPath = "/vr/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "type", type)); // query parameter
            if (stereoscopicType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stereoscopicType", stereoscopicType)); // query parameter
            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (minimumWidth != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "minimumWidth", minimumWidth)); // query parameter
            if (pageNum != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNum", pageNum)); // query parameter
            if (isFaceFilter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isFaceFilter", isFaceFilter)); // query parameter
            if (hasBlendShapes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "hasBlendShapes", hasBlendShapes)); // query parameter
            if (requiresBlendShapes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "requiresBlendShapes", requiresBlendShapes)); // query parameter

            // authentication (XAppToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-app-token")))
            {
                localVarHeaderParams["x-app-token"] = Configuration.GetApiKeyWithPrefix("x-app-token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchMediaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchMediaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchMediaResponse)));
        }

        /// <summary>
        /// Search Endpoint The SVRF Search Endpoint brings the power of immersive search found on [SVRF.com](https://www.svrf.com) to your app or project. SVRF&#39;s search engine enables your users to instantly find the immersive experience they&#39;re seeking. Content is sorted by the SVRF rating system, ensuring that the highest quality content and most prevalent search results are returned. 
        /// </summary>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Url-encoded search query.</param>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results to return per-page, from 1 to 100. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>Task of SearchMediaResponse</returns>
        public async System.Threading.Tasks.Task<SearchMediaResponse> SearchAsync (string q, List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null)
        {
             ApiResponse<SearchMediaResponse> localVarResponse = await SearchAsyncWithHttpInfo(q, type, stereoscopicType, category, size, minimumWidth, pageNum, isFaceFilter, hasBlendShapes, requiresBlendShapes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Endpoint The SVRF Search Endpoint brings the power of immersive search found on [SVRF.com](https://www.svrf.com) to your app or project. SVRF&#39;s search engine enables your users to instantly find the immersive experience they&#39;re seeking. Content is sorted by the SVRF rating system, ensuring that the highest quality content and most prevalent search results are returned. 
        /// </summary>
        /// <exception cref="SVRF.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Url-encoded search query.</param>
        /// <param name="type">The type(s) of Media to be returned (comma separated). (optional)</param>
        /// <param name="stereoscopicType">Search only for Media with a particular stereoscopic type. (optional)</param>
        /// <param name="category">Search only for Media with a particular category. (optional)</param>
        /// <param name="size">The number of results to return per-page, from 1 to 100. (optional, default to 10)</param>
        /// <param name="minimumWidth">The minimum width for video and photo Media, in pixels. (optional)</param>
        /// <param name="pageNum">Pagination control to fetch the next page of results, if applicable. (optional)</param>
        /// <param name="isFaceFilter">Search only for Face Filters. (optional)</param>
        /// <param name="hasBlendShapes">Search only for Media that has blend shapes. (optional)</param>
        /// <param name="requiresBlendShapes">Search only for Media that requires blend shapes. (optional)</param>
        /// <returns>Task of ApiResponse (SearchMediaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchMediaResponse>> SearchAsyncWithHttpInfo (string q, List<MediaType> type = null, string stereoscopicType = null, string category = null, int? size = null, int? minimumWidth = null, int? pageNum = null, bool? isFaceFilter = null, bool? hasBlendShapes = null, bool? requiresBlendShapes = null)
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling MediaApi->Search");

            var localVarPath = "/vr/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "type", type)); // query parameter
            if (stereoscopicType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stereoscopicType", stereoscopicType)); // query parameter
            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (minimumWidth != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "minimumWidth", minimumWidth)); // query parameter
            if (pageNum != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNum", pageNum)); // query parameter
            if (isFaceFilter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isFaceFilter", isFaceFilter)); // query parameter
            if (hasBlendShapes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "hasBlendShapes", hasBlendShapes)); // query parameter
            if (requiresBlendShapes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "requiresBlendShapes", requiresBlendShapes)); // query parameter

            // authentication (XAppToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-app-token")))
            {
                localVarHeaderParams["x-app-token"] = Configuration.GetApiKeyWithPrefix("x-app-token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchMediaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchMediaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchMediaResponse)));
        }

    }
}
